syntax = "proto3";

package concurrentchain.concurrentchain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "concurrentchain/concurrentchain/params.proto";
import "concurrentchain/concurrentchain/addressbook.proto";

option go_package = "github.com/totegamma/concurrent-chain/x/concurrentchain/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/totegamma/concurrent-chain/concurrentchain/params";
  
  }
  
  // Queries a list of Addressbook items.
  rpc Addressbook    (QueryGetAddressbookRequest) returns (QueryGetAddressbookResponse) {
    option (google.api.http).get = "/totegamma/concurrent-chain/concurrentchain/addressbook/{index}";
  
  }
  rpc AddressbookAll (QueryAllAddressbookRequest) returns (QueryAllAddressbookResponse) {
    option (google.api.http).get = "/totegamma/concurrent-chain/concurrentchain/addressbook";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetAddressbookRequest {
  string index = 1;
}

message QueryGetAddressbookResponse {
  Addressbook addressbook = 1 [(gogoproto.nullable) = false];
}

message QueryAllAddressbookRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAddressbookResponse {
  repeated Addressbook                            addressbook = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination  = 2;
}

